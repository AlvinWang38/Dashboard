const express = require('express');
const { Pool } = require('pg');
const cors = require('cors');
require('dotenv').config();

const app = express();
app.use(cors());
app.use(express.json());

// PostgreSQL 連線配置
const pool = new Pool({
  user: process.env.POSTGRES_USER,
  host: process.env.POSTGRES_HOST,
  database: process.env.POSTGRES_DB,
  password: process.env.POSTGRES_PASSWORD,
  port: 5432,
});

// 帶重試機制的連線函數
const connectWithRetry = async (retries = 5, delay = 5000) => {
  for (let i = 0; i < retries; i++) {
    try {
      await pool.connect();
      console.log('Connected to PostgreSQL');
      return;
    } catch (err) {
      console.error(`Failed to connect to PostgreSQL (attempt ${i + 1}/${retries}):`, err.message);
      if (i === retries - 1) throw err;
      await new Promise((resolve) => setTimeout(resolve, delay));
    }
  }
};

// 啟動時連線
connectWithRetry().catch((err) => {
  console.error('Failed to connect to PostgreSQL after retries:', err);
  process.exit(1);
});

// 假設你已有的 InfluxDB 連線
console.log('InfluxDB settings:', {
  host: 'influxdb',
  port: 8086,
  username: process.env.DOCKER_INFLUXDB_INIT_USERNAME,
  password: process.env.DOCKER_INFLUXDB_INIT_PASSWORD,
});

// 獲取設備資料（假設你已有的路由）
app.get('/messages', async (req, res) => {
  const fakeData = [
    {
      device_id: 'TEST1',
      time: '2025-04-09T00:00:00Z',
      la: 25.0330,
      lg: 121.5654,
      tmp: 25,
      tiltx: 0,
      tilty: 0,
      tiltz: 0,
      corev: 3.7,
      liionv: 3.6,
      id: 1,
      ts: 1234567890,
      imei: '123456789012345',
      oper: 'TestOperator',
      ip: '192.168.1.1',
      log_ts: 1234567890,
      remark: 'Test remark',
    },
  ];
  res.json({ data: fakeData });
});

// 獲取設備設定
app.get('/devices/:deviceId/settings', async (req, res) => {
  const { deviceId } = req.params;
  try {
    const result = await pool.query('SELECT * FROM device_settings WHERE device_id = $1', [deviceId]);
    if (result.rows.length > 0) {
      res.json(result.rows[0]);
    } else {
      res.json({
        group_name: 'default',
        container_id: '',
        tractor_id: '',
        geofence_setting: 'None',
        label_color: '#000000',
      });
    }
  } catch (error) {
    console.error('Error fetching settings:', error.message, error.stack);
    res.status(500).json({ error: 'Failed to fetch settings', details: error.message });
  }
});

// 儲存設備設定
app.post('/devices/:deviceId/settings', async (req, res) => {
  const { deviceId } = req.params;
  const { group, containerId, tractorId, geofence, labelColor } = req.body;
  try {
    await pool.query(
      `INSERT INTO device_settings (device_id, group_name, container_id, tractor_id, geofence_setting, label_color, updated_at)
       VALUES ($1, $2, $3, $4, $5, $6, CURRENT_TIMESTAMP)
       ON CONFLICT (device_id)
       DO UPDATE SET
         group_name = $2,
         container_id = $3,
         tractor_id = $4,
         geofence_setting = $5,
         label_color = $6,
         updated_at = CURRENT_TIMESTAMP`,
      [deviceId, group, containerId, tractorId, geofence, labelColor]
    );
    res.json({ success: true });
  } catch (error) {
    console.error('Error saving settings:', error.message, error.stack);
    res.status(500).json({ error: 'Failed to save settings', details: error.message });
  }
});

// MQTT 狀態路由
app.get('/mqtt-status', (req, res) => {
  res.json({ connected: false });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Backend running on port ${PORT}`);
});